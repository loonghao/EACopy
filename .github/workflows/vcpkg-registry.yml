name: Test vcpkg Registry

on:
  push:
    branches: [ add-vcpkg-registry-support ]
  pull_request:
    branches: [ master ]
    paths:
      - 'ports/**'
      - 'versions/**'
      - '.github/workflows/vcpkg-registry.yml'
      - 'CMakeLists.txt'
      - 'cmake/**'
  workflow_dispatch:
    inputs:
      test_triplet:
        description: 'vcpkg triplet to test (e.g., x64-windows, x86-windows)'
        required: false
        default: 'x64-windows'
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean

env:
  VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'

jobs:
  validate-registry:
    runs-on: windows-latest
    outputs:
      registry-valid: ${{ steps.validate.outputs.valid }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate registry structure
      id: validate
      shell: bash
      run: |
        echo "Validating vcpkg registry structure..."

        # Check required directories and files
        required_paths=(
          "ports/eacopy"
          "ports/eacopy/portfile.cmake"
          "ports/eacopy/vcpkg.json"
          "versions/baseline.json"
          "versions/e-/eacopy.json"
        )

        all_valid=true
        for path in "${required_paths[@]}"; do
          if [[ ! -e "$path" ]]; then
            echo "❌ Missing required path: $path"
            all_valid=false
          else
            echo "✅ Found: $path"
          fi
        done

        # Validate JSON files
        if command -v jq >/dev/null 2>&1; then
          echo "Validating JSON files with jq..."

          if jq empty "ports/eacopy/vcpkg.json" 2>/dev/null; then
            echo "✅ ports/eacopy/vcpkg.json is valid JSON"
            version=$(jq -r '.version' "ports/eacopy/vcpkg.json")
            echo "Package version: $version"
          else
            echo "❌ ports/eacopy/vcpkg.json is invalid JSON"
            all_valid=false
          fi

          if jq empty "versions/baseline.json" 2>/dev/null; then
            echo "✅ versions/baseline.json is valid JSON"
            baseline=$(jq -r '.default.eacopy.baseline' "versions/baseline.json")
            echo "Baseline version: $baseline"
          else
            echo "❌ versions/baseline.json is invalid JSON"
            all_valid=false
          fi

          if jq empty "versions/e-/eacopy.json" 2>/dev/null; then
            echo "✅ versions/e-/eacopy.json is valid JSON"
          else
            echo "❌ versions/e-/eacopy.json is invalid JSON"
            all_valid=false
          fi
        else
          echo "⚠️ jq not available, skipping JSON validation"
        fi

        echo "registry-valid=$all_valid" >> $GITHUB_OUTPUT

  test-vcpkg-registry:
    needs: validate-registry
    if: needs.validate-registry.outputs.registry-valid == 'true'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Test registry structure
      shell: bash
      run: |
        echo "Testing vcpkg registry structure..."

        # Verify all required files exist
        echo "Checking registry files..."
        ls -la ports/eacopy/
        ls -la versions/
        ls -la versions/e-/

        # Test JSON syntax
        echo "Testing JSON syntax..."
        if command -v jq >/dev/null 2>&1; then
          echo "✅ Testing ports/eacopy/vcpkg.json"
          jq . ports/eacopy/vcpkg.json

          echo "✅ Testing versions/baseline.json"
          jq . versions/baseline.json

          echo "✅ Testing versions/e-/eacopy.json"
          jq . versions/e-/eacopy.json
        else
          echo "⚠️ jq not available, using basic syntax check"
          python3 -m json.tool ports/eacopy/vcpkg.json > /dev/null
          python3 -m json.tool versions/baseline.json > /dev/null
          python3 -m json.tool versions/e-/eacopy.json > /dev/null
          echo "✅ All JSON files have valid syntax"
        fi

        echo "✅ Registry structure test completed successfully"

  test-summary:
    needs: [validate-registry, test-vcpkg-registry]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Generate test summary
      shell: bash
      run: |
        echo "=== vcpkg Registry Test Summary ==="
        echo ""

        registry_valid="${{ needs.validate-registry.outputs.registry-valid }}"
        test_result="${{ needs.test-vcpkg-registry.result }}"

        if [[ "$registry_valid" == "true" ]]; then
          echo "✅ Registry Validation: PASSED"
          registry_status="✅ Registry structure is valid"
        else
          echo "❌ Registry Validation: FAILED"
          registry_status="❌ Registry validation failed"
        fi

        if [[ "$test_result" == "success" ]]; then
          echo "✅ Registry Tests: PASSED"
          test_status="✅ Registry tests passed"
        else
          echo "❌ Registry Tests: FAILED"
          test_status="❌ Registry tests failed"
        fi

        echo ""
        if [[ "$registry_valid" == "true" && "$test_result" == "success" ]]; then
          echo "✅ Overall Status: ALL TESTS PASSED"
          overall_status="✅ **All tests passed!** The vcpkg registry is working correctly."
        else
          echo "❌ Overall Status: SOME TESTS FAILED"
          overall_status="❌ **Some tests failed.** Please check the logs for details."
        fi

        # Create GitHub step summary
        {
          echo "## vcpkg Registry Test Results"
          echo ""
          echo "### Registry Validation"
          echo "$registry_status"
          echo ""
          echo "### Registry Tests"
          echo "$test_status"
          echo ""
          echo "### Summary"
          echo "$overall_status"
        } >> $GITHUB_STEP_SUMMARY
