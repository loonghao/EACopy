name: CI

# This workflow is triggered only on pull requests to the master branch
# Its main purpose is to verify that builds from other developers work correctly
on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2.11

    - name: Configure CMake
      run: |
        mkdir build_${{ matrix.config }}
        cd build_${{ matrix.config }}
        # Add MSG_WAITALL definition for Windows platform
        cmake .. -DEACOPY_BUILD_TESTS:BOOL=ON -DCMAKE_CXX_FLAGS="/DMSG_WAITALL=0x8"

    - name: Build
      run: |
        cd build_${{ matrix.config }}
        cmake --build . --config ${{ matrix.config }}

    - name: Run Unit Tests
      run: |
        cd build_${{ matrix.config }}/test
        ctest -C ${{ matrix.config }} -V

    - name: Verify Executable Functionality
      run: |
        # Test if EACopy executable works with help flag
        cd build_${{ matrix.config }}
        ./${{ matrix.config }}/EACopy.exe --help || ./${{ matrix.config }}/EACopy.exe /? || (echo "EACopy executable failed to run with help flag" && exit 1)

        # Test if EACopyService executable works with help flag (Windows only)
        ./${{ matrix.config }}/EACopyService.exe /? || (echo "EACopyService executable failed to run with help flag" && exit 1)

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EACopy-${{ matrix.config }}
        path: |
          build_${{ matrix.config }}/${{ matrix.config }}/*.exe
          build_${{ matrix.config }}/${{ matrix.config }}/*.dll
        if-no-files-found: error

  performance-test:
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'master'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0  # Fetch all history for commit info

    - name: Download Release Build
      uses: actions/download-artifact@v4
      with:
        name: EACopy-Release
        path: ./Release

    - name: Download Previous Performance History
      uses: actions/cache@v3
      with:
        path: ./performance_history
        key: performance-history-${{ github.run_id }}
        restore-keys: |
          performance-history-

    - name: Create Directories
      run: |
        mkdir -p perf_test
        mkdir -p performance_history
        mkdir -p performance_trends

    - name: Get Commit ID
      id: get_commit
      run: |
        $CommitId = git rev-parse --short HEAD
        echo "commit_id=$CommitId" >> $env:GITHUB_OUTPUT

    - name: Run Performance Tests
      run: |
        # Show current directory and structure for debugging
        Write-Host "Current directory: $(Get-Location)" -ForegroundColor Yellow
        Write-Host "Directory structure:" -ForegroundColor Yellow
        Get-ChildItem -Path "." -Directory | ForEach-Object { Write-Host "  - $($_.FullName)" }

        # List all executables for debugging
        Write-Host "All executables:" -ForegroundColor Yellow
        Get-ChildItem -Path "." -Recurse -Depth 4 -Include "*.exe" | ForEach-Object { Write-Host "  - $($_.FullName)" }

        # Check specific paths
        $PossiblePaths = @(
            "./build/Release/EACopy.exe",
            "./build_Release/Release/EACopy.exe",
            "./Release/EACopy.exe",
            "./build/Debug/EACopy.exe",
            "./build_Debug/Debug/EACopy.exe",
            "./Debug/EACopy.exe"
        )

        Write-Host "Checking specific paths:" -ForegroundColor Yellow
        foreach ($Path in $PossiblePaths) {
            $Exists = Test-Path $Path
            Write-Host "  - $Path : $($Exists ? 'EXISTS' : 'NOT FOUND')"

            if ($Exists) {
                $FoundPath = $Path
                Write-Host "Found EACopy at: $FoundPath" -ForegroundColor Green
                break
            }
        }

        # Use the found path or try to find it dynamically
        if ($FoundPath) {
            $EACopyPath = $FoundPath
        } else {
            $EACopyPath = (Get-ChildItem -Path "." -Recurse -Depth 4 -Include "EACopy.exe" | Select-Object -First 1).FullName
            if ($EACopyPath) {
                Write-Host "Dynamically found EACopy at: $EACopyPath" -ForegroundColor Green
            } else {
                Write-Host "Could not find EACopy.exe anywhere!" -ForegroundColor Red
                exit 1
            }
        }

        # Create necessary directories first
        New-Item -ItemType Directory -Force -Path "./perf_test" | Out-Null
        New-Item -ItemType Directory -Force -Path "./performance_history" | Out-Null
        New-Item -ItemType Directory -Force -Path "./performance_trends" | Out-Null

        # Run performance tests with minimal file counts and sizes for CI
        # Set a timeout to prevent the test from running too long
        $job = Start-Job -ScriptBlock {
            param($EACopyPath, $CommitId)
            # Create test directory inside the job too
            New-Item -ItemType Directory -Force -Path "./perf_test" | Out-Null
            New-Item -ItemType Directory -Force -Path "./performance_history" | Out-Null

            ./scripts/performance_test.ps1 -EACopyPath $EACopyPath -TestDir "./perf_test" -SmallFileCount 20 -SmallFileSize 1KB -MediumFileCount 5 -MediumFileSize 100KB -LargeFileCount 2 -LargeFileSize 1MB -CleanupAfterTest $false -HistoryDir "./performance_history" -CommitId $CommitId
        } -ArgumentList $EACopyPath, "${{ steps.get_commit.outputs.commit_id }}"

        # Wait for the job to complete with a timeout
        $timeout = 300 # 5 minutes
        if (Wait-Job $job -Timeout $timeout) {
            Receive-Job $job
        } else {
            Write-Host "Performance test timed out after $timeout seconds" -ForegroundColor Red
            Stop-Job $job

            # Create a more detailed performance report even when timeout occurs
            # Run a simplified version of the test with even smaller file counts
            Write-Host "Running simplified performance test after timeout..."

            # Create minimal test files directly
            $SourceDir = "./perf_test/source"
            $DestDir1 = "./perf_test/dest_eacopy"
            $DestDir2 = "./perf_test/dest_robocopy"

            New-Item -ItemType Directory -Force -Path $SourceDir | Out-Null
            New-Item -ItemType Directory -Force -Path $DestDir1 | Out-Null
            New-Item -ItemType Directory -Force -Path $DestDir2 | Out-Null

            # Create just a few small test files
            $SmallFileCount = 5
            $SmallFileSize = 1KB

            Write-Host "Creating $SmallFileCount small test files..."
            for ($i = 1; $i -le $SmallFileCount; $i++) {
                $FilePath = Join-Path $SourceDir "small_file_$i.dat"
                $Buffer = New-Object byte[] $SmallFileSize
                (New-Object Random).NextBytes($Buffer)
                [System.IO.File]::WriteAllBytes($FilePath, $Buffer)
            }

            # Measure EACopy performance
            Write-Host "Testing EACopy performance..."
            $EACopyStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
            & $EACopyPath $SourceDir $DestDir1 | Out-Null
            $EACopyStopWatch.Stop()
            $EACopyTime = $EACopyStopWatch.Elapsed.TotalSeconds

            # Measure Robocopy performance
            Write-Host "Testing Robocopy performance..."
            $RobocopyStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
            & robocopy $SourceDir $DestDir2 /E | Out-Null
            $RobocopyStopWatch.Stop()
            $RobocopyTime = $RobocopyStopWatch.Elapsed.TotalSeconds

            # Calculate difference
            $TimeDiff = $RobocopyTime - $EACopyTime
            $TimeDiffPercent = if ($RobocopyTime -gt 0) {
                [Math]::Round(($TimeDiff / $RobocopyTime) * 100, 2)
            } else {
                0
            }

            $FasterTool = if ($EACopyTime -lt $RobocopyTime) { "EACopy" } else { "Robocopy" }

            # Create the report content
            $ReportTitle = "## EACopy vs Robocopy Performance Test Results"
            $TimeoutInfo = "The full test timed out after $timeout seconds, but a simplified test was completed."
            $ResultsHeader = "### Simplified Test Results"

            $EACopyTimeRounded = [Math]::Round($EACopyTime, 2)
            $RobocopyTimeRounded = [Math]::Round($RobocopyTime, 2)
            $TimeDiffRounded = [Math]::Round($TimeDiff, 2)

            $MinimalReport = "$ReportTitle`n`n$TimeoutInfo`n`n$ResultsHeader`n"
            $MinimalReport += "| Tool | Time (seconds) |`n"
            $MinimalReport += "|------|---------------|`n"
            $MinimalReport += "| EACopy | $EACopyTimeRounded |`n"
            $MinimalReport += "| Robocopy | $RobocopyTimeRounded |`n"
            $MinimalReport += "| Difference | $TimeDiffRounded ($TimeDiffPercent%) |`n"
            $MinimalReport += "| Faster Tool | $FasterTool |`n`n"
            $MinimalReport += "### Test Configuration (Minimal)`n"
            $MinimalReport += "- Small Files: $SmallFileCount files of $SmallFileSize each"

            # Ensure directory exists before writing file
            New-Item -ItemType Directory -Force -Path "./perf_test" | Out-Null
            $MinimalReport | Out-File -FilePath "./perf_test/performance_results.md" -Encoding utf8

            # Create JSON file with the simplified test results
            @{
                TestDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                TestResults = @(
                    @{
                        ScenarioName = "Simplified Test"
                        EACopy = @{
                            ElapsedSeconds = [Math]::Round($EACopyTime, 2)
                            ThroughputMBps = 0
                        }
                        Robocopy = @{
                            ElapsedSeconds = [Math]::Round($RobocopyTime, 2)
                            ThroughputMBps = 0
                        }
                        TimeDiff = [Math]::Round($TimeDiff, 2)
                        TimeDiffPercent = $TimeDiffPercent
                        FasterTool = $FasterTool
                    }
                )
            } | ConvertTo-Json -Depth 5 | Out-File -FilePath "./perf_test/performance_results.json" -Encoding utf8
        }
        Remove-Job $job -Force

    - name: Generate Performance Trends
      run: |
        ./scripts/generate_performance_trends.ps1 -HistoryDir "./performance_history" -OutputDir "./performance_trends"

    - name: Post Performance Results to PR
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Post both the current test results and a link to the trends visualization
        $CurrentResults = Get-Content -Path "./perf_test/performance_results.md" -Raw
        $TrendsSummary = ""
        if (Test-Path "./performance_trends/performance_summary.md") {
            $TrendsSummary = Get-Content -Path "./performance_trends/performance_summary.md" -Raw
        }

        $CombinedReport = $CurrentResults + "`n`n" + $TrendsSummary
        $CombinedReport | Out-File -FilePath "./perf_test/combined_results.md" -Encoding utf8

        ./scripts/post_performance_results.ps1 -MarkdownReportPath "./perf_test/combined_results.md" -GithubToken $env:GITHUB_TOKEN -RepoOwner ${{ github.repository_owner }} -RepoName ${{ github.event.repository.name }} -PrNumber ${{ github.event.pull_request.number }}

    - name: Upload Performance Test Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: |
          ./perf_test
          ./performance_trends
        if-no-files-found: warn

    - name: Cache Performance History
      uses: actions/cache@v3
      with:
        path: ./performance_history
        key: performance-history-${{ github.run_id }}
        restore-keys: |
          performance-history-
