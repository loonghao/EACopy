name: CI

# This workflow is triggered only on pull requests to the master branch
# Its main purpose is to verify that builds from other developers work correctly
on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2.11

    - name: Configure CMake
      run: |
        mkdir build_${{ matrix.config }}
        cd build_${{ matrix.config }}
        # Add MSG_WAITALL definition for Windows platform
        cmake .. -DEACOPY_BUILD_TESTS:BOOL=ON -DCMAKE_CXX_FLAGS="/DMSG_WAITALL=0x8" -DCMAKE_POLICY_VERSION_MINIMUM=3.5

    - name: Build
      run: |
        cd build_${{ matrix.config }}
        cmake --build . --config ${{ matrix.config }}

    - name: Run Unit Tests
      run: |
        cd build_${{ matrix.config }}/test
        ctest -C ${{ matrix.config }} -V

    - name: Verify Executable Functionality
      run: |
        # Test if EACopy executable works with help flag
        cd build_${{ matrix.config }}
        ./${{ matrix.config }}/EACopy.exe --help || ./${{ matrix.config }}/EACopy.exe /? || (echo "EACopy executable failed to run with help flag" && exit 1)

        # Test if EACopyService executable works with help flag (Windows only)
        ./${{ matrix.config }}/EACopyService.exe /? || (echo "EACopyService executable failed to run with help flag" && exit 1)

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EACopy-${{ matrix.config }}
        path: |
          build_${{ matrix.config }}/${{ matrix.config }}/*.exe
          build_${{ matrix.config }}/${{ matrix.config }}/*.dll
        if-no-files-found: error

  performance-test:
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'master'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0  # Fetch all history for commit info

    - name: Download Release Build
      uses: actions/download-artifact@v4
      with:
        name: EACopy-Release
        path: ./Release

    - name: Download Previous Performance History
      uses: actions/cache@v3
      with:
        path: ./performance_history
        key: performance-history-${{ github.run_id }}
        restore-keys: |
          performance-history-

    - name: Create Directories
      run: |
        # Use PowerShell's New-Item command to create directories, which won't error if directories already exist
        New-Item -ItemType Directory -Path "perf_test" -Force -ErrorAction SilentlyContinue | Out-Null
        New-Item -ItemType Directory -Path "performance_history" -Force -ErrorAction SilentlyContinue | Out-Null
        New-Item -ItemType Directory -Path "performance_trends" -Force -ErrorAction SilentlyContinue | Out-Null

        # Display created directories
        Write-Host "Directory structure after creation:" -ForegroundColor Green
        Get-ChildItem -Path "." -Directory | ForEach-Object { Write-Host "  - $($_.FullName)" }

    - name: Get Commit ID
      id: get_commit
      run: |
        $CommitId = git rev-parse --short HEAD
        echo "commit_id=$CommitId" >> $env:GITHUB_OUTPUT

    - name: Find Executables
      id: find_executables
      run: |
        # Show current directory and structure for debugging
        Write-Host "Current directory: $(Get-Location)" -ForegroundColor Yellow
        Write-Host "Directory structure:" -ForegroundColor Yellow
        Get-ChildItem -Path "." -Directory | ForEach-Object { Write-Host "  - $($_.FullName)" }

        # List all executables for debugging
        Write-Host "All executables:" -ForegroundColor Yellow
        Get-ChildItem -Path "." -Recurse -Depth 4 -Include "*.exe" | ForEach-Object { Write-Host "  - $($_.FullName)" }

        # Find EACopy and EACopyService executables
        $Results = @{}

        # Define executables to find - avoid modifying collection during iteration
        $ExecutablesToFind = @("EACopy", "EACopyService")

        $PossiblePaths = @(
            # CI environment paths (most likely)
            "./Release/{0}.exe",
            # Build paths
            "./build/Release/{0}.exe",
            "./build_Release/Release/{0}.exe",
            "./build/Debug/{0}.exe",
            "./build_Debug/Debug/{0}.exe",
            "./Debug/{0}.exe"
        )

        # Process each executable separately to avoid collection modification issues
        foreach ($Executable in $ExecutablesToFind) {
            $FoundPath = $null
            Write-Host "Checking specific paths for $($Executable):" -ForegroundColor Yellow

            # Check each possible path template
            foreach ($PathTemplate in $PossiblePaths) {
                $Path = $PathTemplate -f $Executable
                $Exists = Test-Path $Path
                Write-Host "  - $Path : $(if ($Exists) { 'EXISTS' } else { 'NOT FOUND' })"

                if ($Exists) {
                    $FoundPath = $Path
                    Write-Host "Found $Executable at: $FoundPath" -ForegroundColor Green
                    break
                }
            }

            # If not found in specific paths, search recursively
            if (-not $FoundPath) {
                Write-Host "Searching recursively for $Executable.exe..." -ForegroundColor Yellow
                $ExeFiles = @(Get-ChildItem -Path "." -Recurse -Depth 4 -Include "$Executable.exe" -ErrorAction SilentlyContinue)

                if ($ExeFiles.Count -gt 0) {
                    $DynamicPath = $ExeFiles[0].FullName
                    $FoundPath = $DynamicPath
                    Write-Host "Dynamically found $Executable at: $DynamicPath" -ForegroundColor Green
                } else {
                    Write-Host "Could not find $Executable.exe anywhere!" -ForegroundColor Red
                    if ($Executable -eq "EACopy") {
                        exit 1  # EACopy is required
                    }
                }
            }

            # Store the result
            $Results[$Executable] = $FoundPath
        }

        # Set outputs for use in other steps
        "EACOPY_PATH=$($Results['EACopy'])" >> $env:GITHUB_OUTPUT
        "EACOPYSERVICE_PATH=$($Results['EACopyService'])" >> $env:GITHUB_OUTPUT

        # Display final results
        Write-Host "Final executable paths:" -ForegroundColor Cyan
        Write-Host "EACopy: $($Results['EACopy'])"
        Write-Host "EACopyService: $($Results['EACopyService'])"

    - name: Run Performance Tests
      run: |
        # Use the executable paths from the previous step
        $EACopyPath = "${{ steps.find_executables.outputs.EACOPY_PATH }}"

        # Verify executable path exists
        if (-not (Test-Path $EACopyPath)) {
            Write-Host "ERROR: EACopy executable not found at path: $EACopyPath" -ForegroundColor Red
            Write-Host "Searching for any EACopy executable..." -ForegroundColor Yellow
            $FoundExes = @(Get-ChildItem -Path "." -Recurse -Depth 4 -Include "EACopy.exe" -ErrorAction SilentlyContinue)
            if ($FoundExes.Count -gt 0) {
                $EACopyPath = $FoundExes[0].FullName
                Write-Host "Found alternative EACopy at: $EACopyPath" -ForegroundColor Green
            } else {
                Write-Host "No EACopy executable found anywhere. Cannot continue." -ForegroundColor Red
                exit 1
            }
        } else {
            Write-Host "Verified EACopy executable exists at: $EACopyPath" -ForegroundColor Green
        }

        # Create necessary directories first (with better error handling)
        $DirectoriesToCreate = @("./perf_test", "./performance_history", "./performance_trends")
        foreach ($Dir in $DirectoriesToCreate) {
            Write-Host "Creating directory: $Dir" -ForegroundColor Yellow
            try {
                # Use -Force to ensure no errors even if directory already exists
                New-Item -ItemType Directory -Path $Dir -Force -ErrorAction Stop | Out-Null
                Write-Host "Successfully created directory: $Dir" -ForegroundColor Green
            } catch {
                Write-Host "Warning: Failed to create directory $Dir - $_" -ForegroundColor Yellow
                # Try with absolute path
                try {
                    $AbsPath = Join-Path (Get-Location).Path $Dir
                    New-Item -ItemType Directory -Path $AbsPath -Force -ErrorAction Stop | Out-Null
                    Write-Host "Created with absolute path: $AbsPath" -ForegroundColor Green
                } catch {
                    Write-Host "Critical: Could not create directory even with absolute path - $_" -ForegroundColor Red
                }
            }
        }

        # Run performance tests directly instead of in a job to avoid context issues
        try {
            Write-Host "Running performance test with EACopy path: $EACopyPath" -ForegroundColor Cyan

            # Run with a timeout using Start-Process instead of a job
            $ScriptPath = "./scripts/performance_test.ps1"
            $ScriptArgs = "-EACopyPath `"$EACopyPath`" -TestDir `"./perf_test`" -SmallFileCount 100 -SmallFileSize 10KB -MediumFileCount 20 -MediumFileSize 1MB -LargeFileCount 5 -LargeFileSize 100MB -CleanupAfterTest `$false -HistoryDir `"./performance_history`" -CommitId `"${{ steps.get_commit.outputs.commit_id }}`" -DisableCache -VerifyCopy"

            Write-Host "Command: $ScriptPath $ScriptArgs" -ForegroundColor Yellow

            # Use Start-Process with a timeout
            $process = Start-Process -FilePath "powershell.exe" -ArgumentList "-File $ScriptPath $ScriptArgs" -NoNewWindow -PassThru

            # Wait for the process to complete with a timeout
            $timeout = 300 # 5 minutes
            if (-not $process.WaitForExit($timeout * 1000)) {
                Write-Host "Performance test timed out after $timeout seconds" -ForegroundColor Red
                try {
                    Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
                } catch {
                    Write-Host "Failed to stop process: $_" -ForegroundColor Yellow
                }

                # Create a minimal performance report
                $MinimalReport = "## EACopy vs Robocopy Performance Test Results`n`nTest timed out after $timeout seconds. This may indicate performance issues or environment constraints in CI.`n`n### Test Configuration`n- Small Files: 100 files of 10KB each`n- Medium Files: 20 files of 1MB each`n- Large Files: 5 files of 100MB each`n- EACopy Path: $EACopyPath"
                $MinimalReport | Out-File -FilePath "./perf_test/performance_results.md" -Encoding utf8 -Force
            } else {
                $exitCode = $process.ExitCode
                Write-Host "Performance test completed with exit code: $exitCode" -ForegroundColor $(if ($exitCode -eq 0) { "Green" } else { "Red" })

                # Check if results were generated
                if (-not (Test-Path "./perf_test/performance_results.md")) {
                    Write-Host "No performance results found, creating minimal report" -ForegroundColor Yellow
                    $ResultsReport = "## EACopy vs Robocopy Performance Test Results`n`nPerformance test completed with exit code $exitCode but no results were generated.`n`n### Test Configuration`n- Small Files: 100 files of 10KB each`n- Medium Files: 20 files of 1MB each`n- Large Files: 5 files of 100MB each`n- EACopy Path: $EACopyPath"
                    $ResultsReport | Out-File -FilePath "./perf_test/performance_results.md" -Encoding utf8 -Force
                }
            }
        } catch {
            Write-Host "Error running performance test: $_" -ForegroundColor Red
            Write-Host "Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red

            # Create error report
            $ErrorReport = "## EACopy vs Robocopy Performance Test Results`n`nError occurred while running performance test: $_`n`n### Error Details`n````n$($_.Exception.ToString())`n$($_.ScriptStackTrace)`n````n`n### Test Configuration`n- Small Files: 100 files of 10KB each`n- Medium Files: 20 files of 1MB each`n- Large Files: 5 files of 100MB each`n- EACopy Path: $EACopyPath"
            $ErrorReport | Out-File -FilePath "./perf_test/performance_results.md" -Encoding utf8 -Force
        }

    - name: Generate Performance Trends
      run: |
        # Ensure directories exist using more reliable methods
        $TrendsDirectories = @("./performance_history", "./performance_trends")
        foreach ($Dir in $TrendsDirectories) {
            Write-Host "Ensuring trends directory exists: $Dir" -ForegroundColor Yellow
            try {
                # Use -Force parameter to ensure no errors even if directory already exists
                New-Item -ItemType Directory -Path $Dir -Force -ErrorAction SilentlyContinue | Out-Null
                Write-Host "Trends directory ready: $Dir" -ForegroundColor Green
            } catch {
                Write-Host "Warning: Issue with trends directory $Dir - $_" -ForegroundColor Yellow
                # Try using absolute path as fallback
                try {
                    $AbsPath = Join-Path (Get-Location).Path $Dir
                    New-Item -ItemType Directory -Path $AbsPath -Force -ErrorAction SilentlyContinue | Out-Null
                    Write-Host "Created with absolute path: $AbsPath" -ForegroundColor Green
                } catch {
                    Write-Host "Critical: Could not create directory even with absolute path - $_" -ForegroundColor Red
                }
            }
        }

        # Run the script with explicit error handling
        try {
            Write-Host "Running generate_performance_trends.ps1..." -ForegroundColor Yellow
            ./scripts/generate_performance_trends.ps1 -HistoryDir "./performance_history" -OutputDir "./performance_trends" -ErrorAction Stop
            Write-Host "Successfully generated performance trends" -ForegroundColor Green
        } catch {
            Write-Host "Warning: Failed to generate performance trends - $_" -ForegroundColor Red
            # Continue anyway, as this is not critical
        }

    - name: Post Performance Results to PR
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Post both the current test results and a link to the trends visualization
        $CurrentResults = ""
        $ResultsPath = "./perf_test/performance_results.md"

        # Check for results in alternate locations if primary location doesn't exist
        if (-not (Test-Path $ResultsPath)) {
            Write-Host "Warning: Primary results file not found at $ResultsPath" -ForegroundColor Yellow
            $AlternateLocations = @("./performance_results.md", "./perf_test/results.md")
            foreach ($AltPath in $AlternateLocations) {
                if (Test-Path $AltPath) {
                    Write-Host "Found results at alternate location: $AltPath" -ForegroundColor Green
                    $ResultsPath = $AltPath
                    break
                }
            }
        }

        # Read results if found
        if (Test-Path $ResultsPath) {
            $CurrentResults = Get-Content -Path $ResultsPath -Raw
            Write-Host "Successfully read performance results" -ForegroundColor Green
        } else {
            Write-Host "Warning: No performance results found, creating minimal report" -ForegroundColor Yellow
            $CurrentResults = "## EACopy vs Robocopy Performance Test Results`n`nNo performance data available. The test may have failed to generate results.`n"
        }

        # Get trends summary if available
        $TrendsSummary = ""
        $TrendsPath = "./performance_trends/performance_summary.md"
        if (Test-Path $TrendsPath) {
            $TrendsSummary = Get-Content -Path $TrendsPath -Raw
            Write-Host "Successfully read trends summary" -ForegroundColor Green
        } else {
            Write-Host "No trends summary found at $TrendsPath" -ForegroundColor Yellow
        }

        # Create combined report
        $CombinedReport = $CurrentResults
        if ($TrendsSummary) {
            $CombinedReport += "`n`n" + $TrendsSummary
        }

        # Ensure output directory exists
        $OutputDir = "./perf_test"
        if (-not (Test-Path $OutputDir)) {
            try {
                New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
                Write-Host "Created output directory: $OutputDir" -ForegroundColor Green
            } catch {
                Write-Host "Failed to create output directory: $_" -ForegroundColor Red
                $OutputDir = "."
            }
        }

        # Write combined report
        $CombinedReportPath = "$OutputDir/combined_results.md"
        try {
            $CombinedReport | Out-File -FilePath $CombinedReportPath -Encoding utf8
            Write-Host "Wrote combined report to $CombinedReportPath" -ForegroundColor Green
        } catch {
            Write-Host "Failed to write combined report: $_" -ForegroundColor Red
            $CombinedReportPath = "./combined_results.md"
            $CombinedReport | Out-File -FilePath $CombinedReportPath -Encoding utf8
            Write-Host "Wrote combined report to alternate location: $CombinedReportPath" -ForegroundColor Yellow
        }

        # Post results to PR
        try {
            Write-Host "Posting performance results to PR..." -ForegroundColor Yellow
            ./scripts/post_performance_results.ps1 -MarkdownReportPath $CombinedReportPath -GithubToken $env:GITHUB_TOKEN -RepoOwner ${{ github.repository_owner }} -RepoName ${{ github.event.repository.name }} -PrNumber ${{ github.event.pull_request.number }}
            Write-Host "Successfully posted results to PR" -ForegroundColor Green
        } catch {
            Write-Host "Failed to post results to PR: $_" -ForegroundColor Red
        }

    - name: Prepare Artifacts for Upload
      run: |
        # Create a directory for all artifacts
        $ArtifactsDir = "./artifacts"
        New-Item -ItemType Directory -Path $ArtifactsDir -Force | Out-Null

        # Copy performance test results if they exist
        if (Test-Path "./perf_test") {
            Write-Host "Copying perf_test directory to artifacts" -ForegroundColor Yellow
            Copy-Item -Path "./perf_test" -Destination "$ArtifactsDir/perf_test" -Recurse -Force -ErrorAction SilentlyContinue
        } else {
            Write-Host "perf_test directory not found, creating placeholder" -ForegroundColor Yellow
            New-Item -ItemType Directory -Path "$ArtifactsDir/perf_test" -Force | Out-Null
            "No performance test results were generated." | Out-File -FilePath "$ArtifactsDir/perf_test/info.txt"
        }

        # Copy performance trends if they exist
        if (Test-Path "./performance_trends") {
            Write-Host "Copying performance_trends directory to artifacts" -ForegroundColor Yellow
            Copy-Item -Path "./performance_trends" -Destination "$ArtifactsDir/performance_trends" -Recurse -Force -ErrorAction SilentlyContinue
        } else {
            Write-Host "performance_trends directory not found, creating placeholder" -ForegroundColor Yellow
            New-Item -ItemType Directory -Path "$ArtifactsDir/performance_trends" -Force | Out-Null
            "No performance trends were generated." | Out-File -FilePath "$ArtifactsDir/performance_trends/info.txt"
        }

        # Copy any standalone files that might have been created as fallbacks
        foreach ($File in @("./performance_results.md", "./performance_results.json", "./combined_results.md")) {
            if (Test-Path $File) {
                Write-Host "Copying standalone file $File to artifacts" -ForegroundColor Yellow
                Copy-Item -Path $File -Destination "$ArtifactsDir/" -Force -ErrorAction SilentlyContinue
            }
        }

        # List all files in artifacts directory for verification
        Write-Host "Files prepared for upload:" -ForegroundColor Green
        Get-ChildItem -Path $ArtifactsDir -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" }

    - name: Upload Performance Test Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: ./artifacts
        if-no-files-found: warn

    - name: Cache Performance History
      uses: actions/cache@v3
      with:
        path: ./performance_history
        key: performance-history-${{ github.run_id }}
        restore-keys: |
          performance-history-

    - name: Run Delta Compression Tests
      if: success() && steps.find_executables.outputs.EACOPYSERVICE_PATH != ''
      run: |
        # Get executable paths from previous step
        $EACopyPath = "${{ steps.find_executables.outputs.EACOPY_PATH }}"
        $EACopyServicePath = "${{ steps.find_executables.outputs.EACOPYSERVICE_PATH }}"

        # Verify executable paths exist
        $PathsValid = $true

        if (-not (Test-Path $EACopyPath)) {
            Write-Host "ERROR: EACopy executable not found at path: $EACopyPath" -ForegroundColor Red
            $PathsValid = $false
        } else {
            Write-Host "Verified EACopy executable exists at: $EACopyPath" -ForegroundColor Green
        }

        if (-not (Test-Path $EACopyServicePath)) {
            Write-Host "ERROR: EACopyService executable not found at path: $EACopyServicePath" -ForegroundColor Red
            $PathsValid = $false
        } else {
            Write-Host "Verified EACopyService executable exists at: $EACopyServicePath" -ForegroundColor Green
        }

        # If paths are invalid, try to find executables
        if (-not $PathsValid) {
            Write-Host "Searching for executables..." -ForegroundColor Yellow
            $FoundExes = @(Get-ChildItem -Path "." -Recurse -Depth 4 -Include "*.exe" -ErrorAction SilentlyContinue)

            foreach ($Exe in $FoundExes) {
                Write-Host "Found executable: $($Exe.FullName)" -ForegroundColor Yellow
                if ($Exe.Name -eq "EACopy.exe" -and (-not (Test-Path $EACopyPath))) {
                    $EACopyPath = $Exe.FullName
                    Write-Host "Using EACopy at: $EACopyPath" -ForegroundColor Green
                }
                if ($Exe.Name -eq "EACopyService.exe" -and (-not (Test-Path $EACopyServicePath))) {
                    $EACopyServicePath = $Exe.FullName
                    Write-Host "Using EACopyService at: $EACopyServicePath" -ForegroundColor Green
                }
            }

            # Check if we found both executables
            if (-not (Test-Path $EACopyPath) -or -not (Test-Path $EACopyServicePath)) {
                Write-Host "Could not find required executables. Cannot run delta compression tests." -ForegroundColor Red
                exit 0  # Exit without error to allow other steps to continue
            }
        }

        # Create delta test directory
        $DeltaTestDir = "./delta_test"
        $DeltaResultsDir = "./delta_results"

        # Ensure directories exist
        foreach ($Dir in @($DeltaTestDir, $DeltaResultsDir)) {
            Write-Host "Creating directory: $Dir" -ForegroundColor Yellow
            try {
                # Use -Force to ensure no errors even if directory already exists
                New-Item -ItemType Directory -Path $Dir -Force -ErrorAction Stop | Out-Null
                Write-Host "Successfully created directory: $Dir" -ForegroundColor Green
            } catch {
                Write-Host "Warning: Failed to create directory $Dir - $_" -ForegroundColor Yellow
                # Try with absolute path
                try {
                    $AbsPath = Join-Path (Get-Location).Path $Dir
                    New-Item -ItemType Directory -Path $AbsPath -Force -ErrorAction Stop | Out-Null
                    Write-Host "Created with absolute path: $AbsPath" -ForegroundColor Green
                } catch {
                    Write-Host "Critical: Could not create directory even with absolute path - $_" -ForegroundColor Red
                    # Continue anyway, the script might create the directory
                }
            }
        }

        # Run delta compression tests with minimal file counts and sizes for CI
        try {
            Write-Host "Running delta compression tests..." -ForegroundColor Yellow
            Write-Host "EACopy path: $EACopyPath" -ForegroundColor Cyan
            Write-Host "EACopyService path: $EACopyServicePath" -ForegroundColor Cyan

            # Use Start-Process with a timeout to avoid hanging
            $ScriptPath = "./scripts/delta_compression_test.ps1"
            $ScriptArgs = "-EACopyPath `"$EACopyPath`" -EACopyServicePath `"$EACopyServicePath`" -TestDir `"$DeltaTestDir`" -ResultsDir `"$DeltaResultsDir`" -SmallFileCount 2 -SmallFileSize 1KB -MediumFileCount 1 -MediumFileSize 10KB -LargeFileCount 1 -LargeFileSize 100KB -ModificationPercent 10 -CleanupAfterTest `$false"

            Write-Host "Command: $ScriptPath $ScriptArgs" -ForegroundColor Yellow

            # Use Start-Process with a timeout
            $process = Start-Process -FilePath "powershell.exe" -ArgumentList "-File $ScriptPath $ScriptArgs" -NoNewWindow -PassThru

            # Wait for the process to complete with a timeout
            $timeout = 300 # 5 minutes
            if (-not $process.WaitForExit($timeout * 1000)) {
                Write-Host "Delta compression test timed out after $timeout seconds" -ForegroundColor Red
                try {
                    Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
                } catch {
                    Write-Host "Failed to stop process: $_" -ForegroundColor Yellow
                }

                # Create a minimal report for timeout
                $TimeoutReport = "## EACopy Delta Compression Test Results`n`nTest timed out after $timeout seconds. This may indicate performance issues or environment constraints in CI.`n`n### Test Configuration (Minimal)`n- Small Files: 2 files of 1KB each`n- Medium Files: 1 file of 10KB each`n- Large Files: 1 file of 100KB each`n- Modification Percent: 10%`n- EACopy Path: $EACopyPath`n- EACopyService Path: $EACopyServicePath"

                # Ensure directory exists
                if (-not (Test-Path $DeltaResultsDir)) {
                    New-Item -ItemType Directory -Path $DeltaResultsDir -Force | Out-Null
                }

                # Save timeout report
                $TimeoutReport | Out-File -FilePath "$DeltaResultsDir/delta_compression_results.md" -Encoding utf8
            } else {
                $exitCode = $process.ExitCode
                Write-Host "Delta compression tests completed with exit code: $exitCode" -ForegroundColor $(if ($exitCode -eq 0) { "Green" } else { "Red" })

                # Check if results were generated
                if (-not (Test-Path "$DeltaResultsDir/delta_compression_results.md")) {
                    Write-Host "No delta compression results found, creating minimal report" -ForegroundColor Yellow
                    $ResultsReport = "## EACopy Delta Compression Test Results`n`nDelta compression test completed with exit code $exitCode but no results were generated.`n`n### Test Configuration (Minimal)`n- Small Files: 2 files of 1KB each`n- Medium Files: 1 file of 10KB each`n- Large Files: 1 file of 100KB each`n- Modification Percent: 10%`n- EACopy Path: $EACopyPath`n- EACopyService Path: $EACopyServicePath"

                    # Ensure directory exists
                    if (-not (Test-Path $DeltaResultsDir)) {
                        New-Item -ItemType Directory -Path $DeltaResultsDir -Force | Out-Null
                    }

                    # Save results report
                    $ResultsReport | Out-File -FilePath "$DeltaResultsDir/delta_compression_results.md" -Encoding utf8
                } else {
                    Write-Host "Delta compression tests completed successfully" -ForegroundColor Green
                }
            }

            # Copy results to artifacts directory
            if (Test-Path "$DeltaResultsDir/delta_compression_results.md") {
                if (-not (Test-Path "./artifacts")) {
                    New-Item -ItemType Directory -Path "./artifacts" -Force | Out-Null
                }

                if (-not (Test-Path "./artifacts/delta_results")) {
                    New-Item -ItemType Directory -Path "./artifacts/delta_results" -Force | Out-Null
                }

                Copy-Item -Path "$DeltaResultsDir/delta_compression_results.md" -Destination "./artifacts/delta_results/" -Force
                Write-Host "Copied delta compression results to artifacts" -ForegroundColor Green
            } else {
                Write-Host "Delta compression results file not found" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "Error running delta compression tests: $_" -ForegroundColor Red
            Write-Host "Stack trace: $($_.ScriptStackTrace)" -ForegroundColor Red

            # Create a minimal report for the error
            $ErrorReport = "## EACopy Delta Compression Test Results`n`nDelta compression tests failed with error: $_`n`n### Error Details`n````n$($_.Exception.ToString())`n$($_.ScriptStackTrace)`n````n`n### Test Configuration`n- EACopy Path: $EACopyPath`n- EACopyService Path: $EACopyServicePath"

            # Ensure directory exists
            if (-not (Test-Path $DeltaResultsDir)) {
                New-Item -ItemType Directory -Path $DeltaResultsDir -Force | Out-Null
            }

            # Save error report
            $ErrorReport | Out-File -FilePath "$DeltaResultsDir/delta_compression_results.md" -Encoding utf8

            # Copy to artifacts if they exist
            if (Test-Path "./artifacts") {
                if (-not (Test-Path "./artifacts/delta_results")) {
                    New-Item -ItemType Directory -Path "./artifacts/delta_results" -Force | Out-Null
                }

                Copy-Item -Path "$DeltaResultsDir/delta_compression_results.md" -Destination "./artifacts/delta_results/" -Force
            }
        }

    - name: Upload Delta Compression Test Results
      if: success() && steps.find_executables.outputs.EACOPYSERVICE_PATH != ''
      uses: actions/upload-artifact@v4
      with:
        name: delta-compression-test-results
        path: ./delta_results
        if-no-files-found: warn
