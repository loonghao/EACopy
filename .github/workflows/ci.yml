name: CI

# This workflow is triggered only on pull requests to the master branch
# Its main purpose is to verify that builds from other developers work correctly
on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Debug, Release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2.11

    - name: Configure CMake
      run: |
        mkdir build_${{ matrix.config }}
        cd build_${{ matrix.config }}
        # Add MSG_WAITALL definition for Windows platform
        cmake .. -DEACOPY_BUILD_TESTS:BOOL=ON -DCMAKE_CXX_FLAGS="/DMSG_WAITALL=0x8"

    - name: Build
      run: |
        cd build_${{ matrix.config }}
        cmake --build . --config ${{ matrix.config }}

    - name: Run Unit Tests
      run: |
        cd build_${{ matrix.config }}/test
        ctest -C ${{ matrix.config }} -V

    - name: Verify Executable Functionality
      run: |
        # Test if EACopy executable works with help flag
        cd build_${{ matrix.config }}
        ./${{ matrix.config }}/EACopy.exe --help || ./${{ matrix.config }}/EACopy.exe /? || (echo "EACopy executable failed to run with help flag" && exit 1)

        # Test if EACopyService executable works with help flag (Windows only)
        ./${{ matrix.config }}/EACopyService.exe /? || (echo "EACopyService executable failed to run with help flag" && exit 1)

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EACopy-${{ matrix.config }}
        path: |
          build_${{ matrix.config }}/${{ matrix.config }}/*.exe
          build_${{ matrix.config }}/${{ matrix.config }}/*.dll
        if-no-files-found: error

  performance-test:
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'master'

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0  # Fetch all history for commit info

    - name: Download Release Build
      uses: actions/download-artifact@v4
      with:
        name: EACopy-Release
        path: ./Release

    - name: Download Previous Performance History
      uses: actions/cache@v3
      with:
        path: ./performance_history
        key: performance-history-${{ github.run_id }}
        restore-keys: |
          performance-history-

    - name: Create Directories
      run: |
        mkdir -p perf_test
        mkdir -p performance_history
        mkdir -p performance_trends

    - name: Get Commit ID
      id: get_commit
      run: |
        $CommitId = git rev-parse --short HEAD
        echo "commit_id=$CommitId" >> $env:GITHUB_OUTPUT

    - name: Run Performance Tests
      run: |
        # Show current directory and structure for debugging
        Write-Host "Current directory: $(Get-Location)" -ForegroundColor Yellow
        Write-Host "Directory structure:" -ForegroundColor Yellow
        Get-ChildItem -Path "." -Directory | ForEach-Object { Write-Host "  - $($_.FullName)" }

        # List all executables for debugging
        Write-Host "All executables:" -ForegroundColor Yellow
        Get-ChildItem -Path "." -Recurse -Depth 4 -Include "*.exe" | ForEach-Object { Write-Host "  - $($_.FullName)" }

        # Check specific paths
        $PossiblePaths = @(
            "./build/Release/EACopy.exe",
            "./build_Release/Release/EACopy.exe",
            "./Release/EACopy.exe",
            "./build/Debug/EACopy.exe",
            "./build_Debug/Debug/EACopy.exe",
            "./Debug/EACopy.exe"
        )

        Write-Host "Checking specific paths:" -ForegroundColor Yellow
        foreach ($Path in $PossiblePaths) {
            $Exists = Test-Path $Path
            Write-Host "  - $Path : $($Exists ? 'EXISTS' : 'NOT FOUND')"

            if ($Exists) {
                $FoundPath = $Path
                Write-Host "Found EACopy at: $FoundPath" -ForegroundColor Green
                break
            }
        }

        # Use the found path or try to find it dynamically
        if ($FoundPath) {
            $EACopyPath = $FoundPath
        } else {
            $EACopyPath = (Get-ChildItem -Path "." -Recurse -Depth 4 -Include "EACopy.exe" | Select-Object -First 1).FullName
            if ($EACopyPath) {
                Write-Host "Dynamically found EACopy at: $EACopyPath" -ForegroundColor Green
            } else {
                Write-Host "Could not find EACopy.exe anywhere!" -ForegroundColor Red
                exit 1
            }
        }

        # Create necessary directories first (with better error handling)
        $DirectoriesToCreate = @("./perf_test", "./performance_history", "./performance_trends")
        foreach ($Dir in $DirectoriesToCreate) {
            if (-not (Test-Path $Dir)) {
                Write-Host "Creating directory: $Dir" -ForegroundColor Yellow
                try {
                    New-Item -ItemType Directory -Path $Dir -Force | Out-Null
                } catch {
                    Write-Host "Warning: Failed to create directory $Dir - $_" -ForegroundColor Yellow
                    # Continue anyway, as the directory might be created by another process
                }
            } else {
                Write-Host "Directory already exists: $Dir" -ForegroundColor Gray
            }
        }

        # Run performance tests with minimal file counts and sizes for CI
        # Set a timeout to prevent the test from running too long
        $job = Start-Job -ScriptBlock {
            param($EACopyPath, $CommitId)
            # Create test directory inside the job too (with better error handling)
            $DirectoriesToCreate = @("./perf_test", "./performance_history")
            foreach ($Dir in $DirectoriesToCreate) {
                if (-not (Test-Path $Dir)) {
                    Write-Host "Creating directory in job: $Dir"
                    try {
                        New-Item -ItemType Directory -Path $Dir -Force | Out-Null
                    } catch {
                        Write-Host "Warning: Failed to create directory in job $Dir - $_"
                        # Continue anyway
                    }
                } else {
                    Write-Host "Directory in job already exists: $Dir"
                }
            }

            ./scripts/performance_test.ps1 -EACopyPath $EACopyPath -TestDir "./perf_test" -SmallFileCount 20 -SmallFileSize 1KB -MediumFileCount 5 -MediumFileSize 100KB -LargeFileCount 2 -LargeFileSize 1MB -CleanupAfterTest $false -HistoryDir "./performance_history" -CommitId $CommitId
        } -ArgumentList $EACopyPath, "${{ steps.get_commit.outputs.commit_id }}"

        # Wait for the job to complete with a timeout
        $timeout = 300 # 5 minutes
        if (Wait-Job $job -Timeout $timeout) {
            Receive-Job $job
        } else {
            Write-Host "Performance test timed out after $timeout seconds" -ForegroundColor Red
            Stop-Job $job

            # Create a more detailed report with actual performance data
            Write-Host "Creating simplified performance report with actual timing data..." -ForegroundColor Yellow

            try {
                # Create test directories
                $SourceDir = "./perf_test/source"
                $DestDir1 = "./perf_test/dest_eacopy"
                $DestDir2 = "./perf_test/dest_robocopy"

                # Ensure directories exist (with better error handling)
                $TestDirectories = @("./perf_test", $SourceDir, $DestDir1, $DestDir2)
                foreach ($Dir in $TestDirectories) {
                    if (-not (Test-Path $Dir)) {
                        Write-Host "Creating test directory: $Dir" -ForegroundColor Yellow
                        try {
                            New-Item -ItemType Directory -Path $Dir -Force -ErrorAction Stop | Out-Null
                            Write-Host "  Created successfully" -ForegroundColor Green
                        } catch {
                            Write-Host "  Warning: Failed to create directory $Dir - $_" -ForegroundColor Red
                            # Try a different approach for problematic paths
                            try {
                                $AbsolutePath = Join-Path (Get-Location).Path $Dir
                                Write-Host "  Trying with absolute path: $AbsolutePath" -ForegroundColor Yellow
                                if (-not (Test-Path $AbsolutePath)) {
                                    New-Item -ItemType Directory -Path $AbsolutePath -Force -ErrorAction Stop | Out-Null
                                    Write-Host "  Created with absolute path" -ForegroundColor Green
                                }
                            } catch {
                                Write-Host "  Critical: Both attempts failed - $_" -ForegroundColor Red
                                # Continue anyway, we'll check later if directories exist
                            }
                        }
                    } else {
                        Write-Host "Test directory already exists: $Dir" -ForegroundColor Gray
                    }
                }

                # Create just a few small test files (even smaller than before)
                $SmallFileCount = 3
                $SmallFileSize = 512

                Write-Host "Creating $SmallFileCount small test files of $SmallFileSize bytes each..." -ForegroundColor Yellow
                for ($i = 1; $i -le $SmallFileCount; $i++) {
                    $FilePath = Join-Path $SourceDir "small_file_$i.dat"
                    $Buffer = New-Object byte[] $SmallFileSize
                    (New-Object Random).NextBytes($Buffer)
                    [System.IO.File]::WriteAllBytes($FilePath, $Buffer)
                    Write-Host "  Created file: $FilePath" -ForegroundColor Gray
                }

                # List files to verify creation
                Write-Host "Files in source directory:" -ForegroundColor Yellow
                Get-ChildItem -Path $SourceDir -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" -ForegroundColor Gray }

                # Measure EACopy performance with error handling
                Write-Host "Testing EACopy performance..." -ForegroundColor Yellow
                $EACopyStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
                $EACopyOutput = $null
                $EACopyExitCode = 0

                try {
                    Write-Host "Running: $EACopyPath $SourceDir $DestDir1" -ForegroundColor Gray
                    $EACopyOutput = & $EACopyPath $SourceDir $DestDir1 2>&1
                    $EACopyExitCode = $LASTEXITCODE
                    Write-Host "EACopy exit code: $EACopyExitCode" -ForegroundColor Gray
                    $EACopyOutput | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
                } catch {
                    Write-Host "Error running EACopy: $_" -ForegroundColor Red
                }

                $EACopyStopWatch.Stop()
                $EACopyTime = $EACopyStopWatch.Elapsed.TotalSeconds

                # Verify EACopy results
                if (Test-Path $DestDir1) {
                    Write-Host "Files in EACopy destination directory:" -ForegroundColor Yellow
                    Get-ChildItem -Path $DestDir1 -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" -ForegroundColor Gray }
                } else {
                    Write-Host "EACopy destination directory not created!" -ForegroundColor Red
                }

                # Measure Robocopy performance with error handling
                Write-Host "Testing Robocopy performance..." -ForegroundColor Yellow
                $RobocopyStopWatch = [System.Diagnostics.Stopwatch]::StartNew()
                $RobocopyOutput = $null
                $RobocopyExitCode = 0

                try {
                    Write-Host "Running: robocopy $SourceDir $DestDir2 /E" -ForegroundColor Gray
                    $RobocopyOutput = & robocopy $SourceDir $DestDir2 /E 2>&1
                    $RobocopyExitCode = $LASTEXITCODE
                    Write-Host "Robocopy exit code: $RobocopyExitCode" -ForegroundColor Gray
                    $RobocopyOutput | ForEach-Object { Write-Host "  $_" -ForegroundColor Gray }
                    # Robocopy exit codes 0-7 are success with various levels of copying activity
                    if ($RobocopyExitCode -le 7) { $RobocopyExitCode = 0 }
                } catch {
                    Write-Host "Error running Robocopy: $_" -ForegroundColor Red
                }

                $RobocopyStopWatch.Stop()
                $RobocopyTime = $RobocopyStopWatch.Elapsed.TotalSeconds

                # Verify Robocopy results
                if (Test-Path $DestDir2) {
                    Write-Host "Files in Robocopy destination directory:" -ForegroundColor Yellow
                    Get-ChildItem -Path $DestDir2 -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" -ForegroundColor Gray }
                } else {
                    Write-Host "Robocopy destination directory not created!" -ForegroundColor Red
                }

                # Calculate difference
                $TimeDiff = $RobocopyTime - $EACopyTime
                $TimeDiffPercent = if ($RobocopyTime -gt 0) {
                    [Math]::Round(($TimeDiff / $RobocopyTime) * 100, 2)
                } else {
                    0
                }

                $FasterTool = if ($EACopyTime -lt $RobocopyTime) { "EACopy" } else { "Robocopy" }

                # Round values for display
                $EACopyTimeRounded = [Math]::Round($EACopyTime, 2)
                $RobocopyTimeRounded = [Math]::Round($RobocopyTime, 2)
                $TimeDiffRounded = [Math]::Round($TimeDiff, 2)

                # Create report
                $ReportTitle = "## EACopy vs Robocopy Performance Test Results"
                $TimeoutInfo = "The full test timed out after $timeout seconds, but a simplified test was completed."
                $ResultsHeader = "### Simplified Test Results"

                $MinimalReport = "$ReportTitle`n`n$TimeoutInfo`n`n$ResultsHeader`n"
                $MinimalReport += "| Tool | Time (seconds) | Exit Code |`n"
                $MinimalReport += "|------|---------------|-----------|`n"
                $MinimalReport += "| EACopy | $EACopyTimeRounded | $EACopyExitCode |`n"
                $MinimalReport += "| Robocopy | $RobocopyTimeRounded | $RobocopyExitCode |`n"
                $MinimalReport += "| Difference | $TimeDiffRounded ($TimeDiffPercent%) | - |`n"
                $MinimalReport += "| Faster Tool | $FasterTool | - |`n`n"
                $MinimalReport += "### Test Configuration (Minimal)`n"
                $MinimalReport += "- Small Files: $SmallFileCount files of $SmallFileSize bytes each`n"
                $MinimalReport += "- Test run directly in CI environment (not in background job)"

                # Create JSON results
                $TestResults = @(
                    @{
                        ScenarioName = "Simplified Test"
                        EACopy = @{
                            ElapsedSeconds = $EACopyTimeRounded
                            ThroughputMBps = 0
                            ExitCode = $EACopyExitCode
                        }
                        Robocopy = @{
                            ElapsedSeconds = $RobocopyTimeRounded
                            ThroughputMBps = 0
                            ExitCode = $RobocopyExitCode
                        }
                        TimeDiff = $TimeDiffRounded
                        TimeDiffPercent = $TimeDiffPercent
                        FasterTool = $FasterTool
                    }
                )
            } catch {
                Write-Host "Error during simplified performance test: $_" -ForegroundColor Red

                # Create fallback report if everything fails
                $MinimalReport = "## EACopy vs Robocopy Performance Test Results`n`n"
                $MinimalReport += "Test timed out after $timeout seconds and simplified test failed with error: $_`n`n"
                $MinimalReport += "### Error Details`n"
                $MinimalReport += "````n$($_.Exception.ToString())`n$($_.ScriptStackTrace)`n```"

                $TestResults = @()
            }

            # Write results to files with error handling
            try {
                # Ensure perf_test directory exists
                if (-not (Test-Path "./perf_test")) {
                    Write-Host "Creating final report directory: ./perf_test" -ForegroundColor Yellow
                    New-Item -ItemType Directory -Path "./perf_test" -Force -ErrorAction Stop | Out-Null
                }

                Write-Host "Writing performance report to ./perf_test/performance_results.md" -ForegroundColor Yellow
                $MinimalReport | Out-File -FilePath "./perf_test/performance_results.md" -Encoding utf8

                $JsonResults = @{
                    TestDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    TestResults = $TestResults
                } | ConvertTo-Json -Depth 5

                $JsonResults | Out-File -FilePath "./perf_test/performance_results.json" -Encoding utf8
                Write-Host "Successfully wrote performance results to JSON file" -ForegroundColor Green
            } catch {
                Write-Host "Error creating report directory or writing report: $_" -ForegroundColor Red
                # Try writing to current directory as fallback
                try {
                    $MinimalReport | Out-File -FilePath "./performance_results.md" -Encoding utf8
                    Write-Host "Wrote report to ./performance_results.md instead" -ForegroundColor Yellow

                    $JsonResults = @{
                        TestDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                        TestResults = $TestResults
                    } | ConvertTo-Json -Depth 5

                    $JsonResults | Out-File -FilePath "./performance_results.json" -Encoding utf8
                    Write-Host "Wrote JSON to ./performance_results.json instead" -ForegroundColor Yellow
                } catch {
                    Write-Host "Critical: Failed to write reports anywhere: $_" -ForegroundColor Red
                }
            }
        }
        Remove-Job $job -Force

    - name: Generate Performance Trends
      run: |
        # Ensure directories exist before running script
        $TrendsDirectories = @("./performance_history", "./performance_trends")
        foreach ($Dir in $TrendsDirectories) {
            if (-not (Test-Path $Dir)) {
                Write-Host "Creating trends directory: $Dir" -ForegroundColor Yellow
                try {
                    New-Item -ItemType Directory -Path $Dir -Force | Out-Null
                    Write-Host "Created trends directory: $Dir" -ForegroundColor Green
                } catch {
                    Write-Host "Warning: Failed to create trends directory $Dir - $_" -ForegroundColor Red
                }
            } else {
                Write-Host "Trends directory already exists: $Dir" -ForegroundColor Gray
            }
        }

        # Run the script with explicit error handling
        try {
            Write-Host "Running generate_performance_trends.ps1..." -ForegroundColor Yellow
            ./scripts/generate_performance_trends.ps1 -HistoryDir "./performance_history" -OutputDir "./performance_trends" -ErrorAction Stop
            Write-Host "Successfully generated performance trends" -ForegroundColor Green
        } catch {
            Write-Host "Warning: Failed to generate performance trends - $_" -ForegroundColor Red
            # Continue anyway, as this is not critical
        }

    - name: Post Performance Results to PR
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Post both the current test results and a link to the trends visualization
        $CurrentResults = ""
        $ResultsPath = "./perf_test/performance_results.md"

        # Check for results in alternate locations if primary location doesn't exist
        if (-not (Test-Path $ResultsPath)) {
            Write-Host "Warning: Primary results file not found at $ResultsPath" -ForegroundColor Yellow
            $AlternateLocations = @("./performance_results.md", "./perf_test/results.md")
            foreach ($AltPath in $AlternateLocations) {
                if (Test-Path $AltPath) {
                    Write-Host "Found results at alternate location: $AltPath" -ForegroundColor Green
                    $ResultsPath = $AltPath
                    break
                }
            }
        }

        # Read results if found
        if (Test-Path $ResultsPath) {
            $CurrentResults = Get-Content -Path $ResultsPath -Raw
            Write-Host "Successfully read performance results" -ForegroundColor Green
        } else {
            Write-Host "Warning: No performance results found, creating minimal report" -ForegroundColor Yellow
            $CurrentResults = "## EACopy vs Robocopy Performance Test Results`n`nNo performance data available. The test may have failed to generate results.`n"
        }

        # Get trends summary if available
        $TrendsSummary = ""
        $TrendsPath = "./performance_trends/performance_summary.md"
        if (Test-Path $TrendsPath) {
            $TrendsSummary = Get-Content -Path $TrendsPath -Raw
            Write-Host "Successfully read trends summary" -ForegroundColor Green
        } else {
            Write-Host "No trends summary found at $TrendsPath" -ForegroundColor Yellow
        }

        # Create combined report
        $CombinedReport = $CurrentResults
        if ($TrendsSummary) {
            $CombinedReport += "`n`n" + $TrendsSummary
        }

        # Ensure output directory exists
        $OutputDir = "./perf_test"
        if (-not (Test-Path $OutputDir)) {
            try {
                New-Item -ItemType Directory -Path $OutputDir -Force | Out-Null
                Write-Host "Created output directory: $OutputDir" -ForegroundColor Green
            } catch {
                Write-Host "Failed to create output directory: $_" -ForegroundColor Red
                $OutputDir = "."
            }
        }

        # Write combined report
        $CombinedReportPath = "$OutputDir/combined_results.md"
        try {
            $CombinedReport | Out-File -FilePath $CombinedReportPath -Encoding utf8
            Write-Host "Wrote combined report to $CombinedReportPath" -ForegroundColor Green
        } catch {
            Write-Host "Failed to write combined report: $_" -ForegroundColor Red
            $CombinedReportPath = "./combined_results.md"
            $CombinedReport | Out-File -FilePath $CombinedReportPath -Encoding utf8
            Write-Host "Wrote combined report to alternate location: $CombinedReportPath" -ForegroundColor Yellow
        }

        # Post results to PR
        try {
            Write-Host "Posting performance results to PR..." -ForegroundColor Yellow
            ./scripts/post_performance_results.ps1 -MarkdownReportPath $CombinedReportPath -GithubToken $env:GITHUB_TOKEN -RepoOwner ${{ github.repository_owner }} -RepoName ${{ github.event.repository.name }} -PrNumber ${{ github.event.pull_request.number }}
            Write-Host "Successfully posted results to PR" -ForegroundColor Green
        } catch {
            Write-Host "Failed to post results to PR: $_" -ForegroundColor Red
        }

    - name: Prepare Artifacts for Upload
      run: |
        # Create a directory for all artifacts
        $ArtifactsDir = "./artifacts"
        New-Item -ItemType Directory -Path $ArtifactsDir -Force | Out-Null

        # Copy performance test results if they exist
        if (Test-Path "./perf_test") {
            Write-Host "Copying perf_test directory to artifacts" -ForegroundColor Yellow
            Copy-Item -Path "./perf_test" -Destination "$ArtifactsDir/perf_test" -Recurse -Force -ErrorAction SilentlyContinue
        } else {
            Write-Host "perf_test directory not found, creating placeholder" -ForegroundColor Yellow
            New-Item -ItemType Directory -Path "$ArtifactsDir/perf_test" -Force | Out-Null
            "No performance test results were generated." | Out-File -FilePath "$ArtifactsDir/perf_test/info.txt"
        }

        # Copy performance trends if they exist
        if (Test-Path "./performance_trends") {
            Write-Host "Copying performance_trends directory to artifacts" -ForegroundColor Yellow
            Copy-Item -Path "./performance_trends" -Destination "$ArtifactsDir/performance_trends" -Recurse -Force -ErrorAction SilentlyContinue
        } else {
            Write-Host "performance_trends directory not found, creating placeholder" -ForegroundColor Yellow
            New-Item -ItemType Directory -Path "$ArtifactsDir/performance_trends" -Force | Out-Null
            "No performance trends were generated." | Out-File -FilePath "$ArtifactsDir/performance_trends/info.txt"
        }

        # Copy any standalone files that might have been created as fallbacks
        foreach ($File in @("./performance_results.md", "./performance_results.json", "./combined_results.md")) {
            if (Test-Path $File) {
                Write-Host "Copying standalone file $File to artifacts" -ForegroundColor Yellow
                Copy-Item -Path $File -Destination "$ArtifactsDir/" -Force -ErrorAction SilentlyContinue
            }
        }

        # List all files in artifacts directory for verification
        Write-Host "Files prepared for upload:" -ForegroundColor Green
        Get-ChildItem -Path $ArtifactsDir -Recurse | ForEach-Object { Write-Host "  - $($_.FullName)" }

    - name: Upload Performance Test Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: ./artifacts
        if-no-files-found: warn

    - name: Cache Performance History
      uses: actions/cache@v3
      with:
        path: ./performance_history
        key: performance-history-${{ github.run_id }}
        restore-keys: |
          performance-history-
